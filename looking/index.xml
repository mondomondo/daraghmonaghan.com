<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daragh Monaghan</title>
    <link>https://daraghmonaghan.com/looking/</link>
    <description>Recent content on Daragh Monaghan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Feb 2025 09:03:20 -0800</lastBuildDate>
    
	<atom:link href="https://daraghmonaghan.com/looking/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    
    
    <item>
      <title>KMS &amp; CSI</title>
      <link>https://daraghmonaghan.com/posts/kms_csi/</link>
      <pubDate>Thu, 11 Jan 2024 09:03:20 -0800</pubDate>
      
      <guid>https://daraghmonaghan.com/posts/kms_csi/</guid>
      <description>&lt;p&gt;I won&amp;rsquo;t recommend any one particular KMS but for illustrative purposes, will use Fortanix Data Security Manager here as an example I&amp;rsquo;m familar with, but its safe enough to say this is basic functionality of any key management platform. You can store a variety of forms of sensitive data here and retrieve them using API keys, certs, basic authentication. Fortanix provides a a wide variety of object types, encoding schemes, rotation options and granular access controls.&lt;br&gt;
OpenShift supports the use of a CSI Driver - a Kubernetes object that interfaces with EKMS to forward specified credentials as secrets within a cluster. There are different levels of security even within this approach - whether you apply your API key within the CSI Driver object, or store it as its own secret in the cluster and refer to that is up to you. Fortanix also supports a two way communication between the platforms, enabling automatic rotation your API key.&lt;/p&gt;
&lt;p&gt;One other advantage to this approach is that your secrets are kept in one off-system location, distinct from your cluster. Consider whether multiple systems, platforms or services are referring to the same credentials, or require communication of the same security certs. Arguably it gives greater scope for portability. If you see yourself migrating a Kubernetes application off SEBShift and onto GCP in the future, would it be easier to do so if its already connecting to an external service?&lt;/p&gt;
&lt;p&gt;There can often be a trade-off between features and dependecies on additional services/platforms/tools, all with their own maintenece load and tech-debt. One should carefully consider whether the feature a new tool provides is worth the additional load that it inherently contributes.&lt;/p&gt;
&lt;h3 id=&#34;why-not-both&#34;&gt;Why Not Both?&lt;/h3&gt;
&lt;p&gt;By combining the key management a KMS provides, and  the two methods available to use, we can achieve a high level of obfuscation. Seal your EKMS key in a SealedSecret, setup the CSI driver to retrieve your secrets and mount them appropriately. However, bear in mind that both services have their own key rotation/renewal requirements, the implications of which imply a level of complexity that I am personally not yet comfortable with.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>The Why</title>
      <link>https://daraghmonaghan.com/posts/the_why/</link>
      <pubDate>Thu, 11 Jan 2024 09:03:20 -0800</pubDate>
      
      <guid>https://daraghmonaghan.com/posts/the_why/</guid>
      <description>&lt;p&gt;A theme I have noticed while applying GitOps practices is a lack of &lt;em&gt;justification&lt;/em&gt;. What problem does your recommendation solve? I think this is applicable to a lot of different areas within tech but as I was comparing some tools within the GitOps sphere recently, I was taken aback at how uninformative communication on technical opinions could be.&lt;/p&gt;
&lt;p&gt;Start searching the keywords &amp;lsquo;helm&amp;rsquo; and &amp;lsquo;secrets&amp;rsquo; and you&amp;rsquo;ll find a lot of context-ignorant Reddit (generally good advice: don&amp;rsquo;t look for advice on Reddit) posts along the lines of: &lt;br&gt;
&lt;code&gt;&amp;quot;we used sops, now we use kops/skops/mops&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;quot;Start over, run Flux&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;quot;Just run Vault lol&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Evidently, there are a range of great solutions out there. There&amp;rsquo;s a hundred ways to accomplish what you&amp;rsquo;re looking to do. But what makes that choice? Why would we use this tool over another? Make your case. Empathy is at the root of almost everything. Put yourself in the boots of your target audience.&lt;/p&gt;
&lt;p&gt;I suspect the people who make these sorts of posts either had the decisions made for them and they live under that decision, every day on production a new opportunity to proselytize, or they themselves based their decisions on little more than intuition, legitimately lacking solidly backed reasoning.&lt;/p&gt;
&lt;p&gt;But this happens everyday. Sometimes a new tool gains traction because it solves an immediate problem and you have to accept its limitations for years to come. And sometimes a colleague decides to move from Gradle to Maven and no-one questions the PRs. Make sure you know &lt;em&gt;why&lt;/em&gt; you&amp;rsquo;re doing what you&amp;rsquo;re doing and make it explicit.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>GitOps &amp; Secrets</title>
      <link>https://daraghmonaghan.com/posts/gitops_secrets/</link>
      <pubDate>Sat, 06 Jan 2024 09:03:20 -0800</pubDate>
      
      <guid>https://daraghmonaghan.com/posts/gitops_secrets/</guid>
      <description>&lt;p&gt;So you&amp;rsquo;ve struck out on the GitOps path&amp;hellip; You&amp;rsquo;ve got your application manifests templated out in Helm, they&amp;rsquo;re stored on Github, you&amp;rsquo;ve got ArgoCD facing your repo and an ApplicationSet putting everything together. &amp;ldquo;Ahhhhh&amp;rdquo;, you recline, feet on your desk, &amp;ldquo;this is the sweet life.&amp;rdquo; But something enters your mind. Something feels off. Sure, your pull requests are building ephemeral preview builds to the cluster, but what about the secrets? Up to this point, you had excluded secrets from your deployment templates, simply conceding that once an application is built, someone still has to log on to the cluster console to configure the secrets before the application will run properly. You wouldn&amp;rsquo;t want those precious API keys out on display on GitHub, your database credentials and connection strings out there for all to see&amp;hellip; you need these secrets off your repositories! &amp;ldquo;Damn it all to hell!&amp;rdquo; you say and press the big red button that returns everything to 2-hour long Jenkins builds.&lt;/p&gt;
&lt;p&gt;But wait&amp;hellip; there might be a way around this. Press that other big red button that undoes the first one.&lt;/p&gt;
&lt;h4 id=&#34;sealedsecrets&#34;&gt;SealedSecrets&lt;/h4&gt;
&lt;p&gt;We can used SealedSecrets to package secrets opaquely. SealedSecrets are a feature of Kubernetes - signed secret objects exclusive to a specific cluster. And if we want to package our secrets alongside our code for dynamic deployment, they do the job nicely.&lt;/p&gt;
&lt;p&gt;In the two-element system made up of a cluster-side operator and a client side utility, a normal Secret.yaml is passed from your local machine to the cluster, which encrypts its contents, and returns to you a SealedSecret object file. This SealedSecret file is only readable by the cluster that signed it - not even you can read it. These SealedSecrets can then be safely stored in plain sight, on a public repository for example, safe in the knowledge that it can be used only by the intended cluster. This is the key for our initial problem - successfully obscuring a secret from local development, all the way through the pipeline, the secret only becoming available to the system intended to run it.&lt;/p&gt;
&lt;h4 id=&#34;a-word-on-key-management-software&#34;&gt;A Word on Key Management Software&lt;/h4&gt;
&lt;p&gt;In my opinion, considering their apparent simplicity, SealedSecrets accomplish a lot. If we&amp;rsquo;re defining our problem as how to safely package sensitive information for GitOps deployments, they provide an tidy way to do this. But we&amp;rsquo;re still handling credentials manually in the sealing process. If we want to look beyond this, to a future you can be more even more hands off with management of the secrets&amp;rsquo; actual values, implementing or integrating an existing key management platform to your GitOps flow could be the solution. Together, the tools potentiate one another and provide not only a secure way of providing sensitive values to your Helm builds, but secure storage of the values, automatic provisioning and cycling of values where needed, reducing the need for manual handling of secure data. Key Management Software, version control, build tools - can all be considered as sources for these values.&lt;/p&gt;
&lt;h3 id=&#34;the-why&#34;&gt;The Why&lt;/h3&gt;
&lt;p&gt;There are numerous ways one could implement secret values in a GitOps workflow, but in these posts I&amp;rsquo;d like to concentrate on the &lt;em&gt;why&lt;/em&gt; behind particular Dev&amp;amp;GitOps tools, and avoid too much technical detail. There are a few of these options I&amp;rsquo;d like to cover here in the future:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KMS and Kubernetes CSI Drivers&lt;/li&gt;
&lt;li&gt;Sealing Secrets with CI/CD tools&lt;/li&gt;
&lt;li&gt;Secrets &amp;amp; ArgoCD&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    
  </channel>
</rss>
